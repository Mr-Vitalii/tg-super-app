// src/hooks/useAuth.ts
import { useCallback } from 'react'
import { useAppDispatch, useAppSelector } from '@/store/hooks'
import {
  useLoginMutation,
  useLogoutMutation,
  useGetMeQuery,
} from '@/services/authApi'
import { clearUser } from '@/features/auth/authSlice'

/**
 * üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
 * true  ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–∫-–¥–∞–Ω–Ω—ã–µ (—Ç–µ—Å—Ç –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)
 * false ‚Äî –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π backend (—á–µ—Ä–µ–∑ authApi)
 */

/* const USE_LOCAL_AUTH = false */

export const useAuth = () => {
  const user = useAppSelector((s) => s.auth.user)
  const dispatch = useAppDispatch()

  // ========================================================================
  // 1Ô∏è‚É£ –õ–û–ö–ê–õ–¨–ù–´–ô –í–ê–†–ò–ê–ù–¢ (mock, –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞)
  // ========================================================================
  /*   if (USE_LOCAL_AUTH) {
    const mockUser = { sid: 'abc123', user: { id: '343567', name: '–†–ï–ö–°' } }

    const authorize = async (initData: string, name: string) => {
      console.log('[LOCAL AUTH] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞:', { initData, name })
      if (typeof window !== 'undefined') {
        localStorage.setItem('sid', mockUser.sid)
      }
      return mockUser
    }

    const logout = async () => {
      console.log('[LOCAL AUTH] –õ–æ–≥–∞—É—Ç –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–∞')
      if (typeof window !== 'undefined') {
        localStorage.removeItem('sid')
      }
      dispatch(clearUser())
    }

    return {
      user: mockUser.user,
      loading: false,
      authorize,
      logout,
      _internal: { mode: 'local' as const },
    }
  } */

  // ========================================================================
  // 2Ô∏è‚É£ –°–ï–†–í–ï–†–ù–´–ô –í–ê–†–ò–ê–ù–¢ (production)
  // ========================================================================

  // GET /api/me
  const meQuery = useGetMeQuery(undefined, {
    skip: false, // –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å true –∏ –≤—ã–∑—ã–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é)
  })

  // POST /api/auth
  const [login, loginResult] = useLoginMutation()

  // POST /api/logout
  const [logoutMutation, logoutResult] = useLogoutMutation()

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (POST /api/auth)
   * backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç { sid, user }, sid —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ authApi
   */
  const authorize = useCallback(
    async (initData: string, name: string) => {
      const res = await login({ name, initData }).unwrap()
      return res
    },
    [login]
  )

  /**
   * –õ–æ–≥–∞—É—Ç (POST /api/logout)
   * —É–¥–∞–ª—è–µ—Ç sid –∏ –æ—á–∏—â–∞–µ—Ç store
   */
  const doLogout = useCallback(async () => {
    try {
      await logoutMutation().unwrap()
    } catch {
      // –µ—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ ‚Äî –≤—Å—ë —Ä–∞–≤–Ω–æ —á–∏—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (typeof window !== 'undefined') localStorage.removeItem('sid')
      dispatch(clearUser())
    }
  }, [logoutMutation, dispatch])

  /**
   * –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –∫—ç—à–∞ /api/me
   */
  /* const user = (meQuery.data as any)?.user || null */

  console.log('useAuth', { user, loading: meQuery.isFetching })

  return {
    user,
    loading: meQuery.isFetching,
    authorize,
    logout: doLogout,
    _internal: {
      mode: 'server' as const,
      meQuery,
      loginResult,
      logoutResult,
    },
  }
}
