// src/services/productsApi.ts
import { createApi } from '@reduxjs/toolkit/query/react'
import type { Service } from '@/common/types/services'
// import { baseQuery } from '@/services/baseQuery' // –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º

// ============================================================================
// ‚úÖ 1Ô∏è‚É£ –õ–û–ö–ê–õ–¨–ù–´–ô –í–ê–†–ò–ê–ù–¢ (mock) ‚Äî –ê–ö–¢–ò–í–ï–ù
// ============================================================================

export const productsApi = createApi({
  reducerPath: 'productsApi',
  baseQuery: async () => ({ data: {} }), // —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π baseQuery (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
  endpoints: (build) => ({
    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥ (—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ, –∏–∑ mock-–¥–∞–Ω–Ω—ã—Ö)
    getProducts: build.query<Service[], { page: number; limit?: number }>({
      async queryFn({ page, limit = 9 }) {
        try {
          const { services } = await import('@/modules/services/data/services')
          const start = (page - 1) * limit
          const paginated = services.slice(start, start + limit)
          await new Promise((r) => setTimeout(r, 300)) // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
          return { data: paginated }
        } catch (err) {
          return {
            error: { status: 500, data: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥ (mock)' },
          }
        }
      },
    }),

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏ (–ª–æ–∫–∞–ª—å–Ω–æ)
    getProduct: build.query<Service, string>({
      async queryFn(id) {
        try {
          const { services } = await import('@/modules/services/data/services')
          const found = services.find((s) => s.id === id)
          if (!found)
            return { error: { status: 404, data: '–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (mock)' } }
          await new Promise((r) => setTimeout(r, 200))
          return { data: found }
        } catch (err) {
          return {
            error: { status: 500, data: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥–∏ (mock)' },
          }
        }
      },
    }),

    // üîπ –£—Å–ª—É–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–ª–æ–∫–∞–ª—å–Ω–æ)
    getCompanyServices: build.query<
      Service[],
      { companyId: string; page: number; limit?: number }
    >({
      async queryFn({ companyId, page, limit = 9 }) {
        try {
          const { services } = await import('@/modules/services/data/services')

          const filtered = services.filter((s) => s.companyId === companyId)
          const start = (page - 1) * limit
          const paginated = filtered.slice(start, start + limit)

          await new Promise((r) => setTimeout(r, 400)) // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

          return { data: paginated }
        } catch (err) {
          return {
            error: { status: 500, data: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥ (mock)' },
          }
        }
      },
    }),
  }),
})

/*
// ============================================================================
// üí§ 2Ô∏è‚É£ –†–ï–ê–õ–¨–ù–´–ô –í–ê–†–ò–ê–ù–¢ (—á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä) ‚Äî –û–¢–ö–õ–Æ–ß–Å–ù
// ============================================================================
export const productsApi = createApi({
  reducerPath: 'productsApi',
  baseQuery, // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–±—â–∏–π baseQuery —Å X-Session-Id –∏ X-Telegram-InitData
  endpoints: (build) => ({
    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥ (—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ)
    getProducts: build.query<Service[], { page: number; limit?: number }>({
      query: ({ page, limit = 9 }) =>
        `/api/products?page=${page}&limit=${limit}`,
    }),

    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
    getProduct: build.query<Service, string>({
      query: (id) => `/api/services/${id}`,
    }),

    // üîπ –£—Å–ª—É–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    getCompanyServices: build.query<
      Service[],
      { companyId: string; page: number; limit?: number }
    >({
      query: ({ companyId, page, limit = 9 }) =>
        `/api/companies/${companyId}/services?page=${page}&limit=${limit}`,
    }),
  }),
})
*/

// ============================================================================
// üî∏ –ï–î–ò–ù–´–ô –≠–ö–°–ü–û–†–¢ –•–£–ö–û–í (–æ–±—â–∏–π –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤)
// ============================================================================
export const {
  useLazyGetProductsQuery,
  useGetProductQuery,
  useLazyGetCompanyServicesQuery,
} = productsApi

export default productsApi
