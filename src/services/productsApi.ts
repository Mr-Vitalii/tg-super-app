import { createApi } from '@reduxjs/toolkit/query/react'
import type { Service } from '@/common/types/services'
import { baseQuery } from '@/services/baseQuery' // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π baseQuery

/* import { services as localServices } from '@/modules/services/data/services' */

export const productsApi = createApi({
  reducerPath: 'productsApi',
  baseQuery, // ‚úÖ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—â–∏–π baseQuery —Å X-Session-Id –∏ X-Telegram-InitData
  endpoints: (build) => ({
    // ===============================
    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å–ª—É–≥ (—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ)
    // ===============================
    getProducts: build.query<Service[], { page: number; limit?: number }>({
      query: ({ page, limit = 9 }) =>
        `/api/products?page=${page}&limit=${limit}`,
    }),

    // ===============================
    // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏
    // ===============================
    getProduct: build.query<Service, string>({
      query: (id) => `/api/services/${id}`,
    }),

    // ===============================
    // üîπ –£—Å–ª—É–≥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ (–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä)
    // ===============================
    getCompanyServices: build.query<
      Service[],
      { companyId: string; page: number; limit?: number }
    >({
      query: ({ companyId, page, limit = 9 }) =>
        `/api/companies/${companyId}/services?page=${page}&limit=${limit}`,
    }),

    // ===============================
    // üî∏ –°—Ç–∞—Ä—ã–π –ª–æ–∫–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ñ—Ñ–ª–∞–π–Ω–∞)
    // ===============================
    /*
    getCompanyServices: build.query<
      Service[],
      { companyId: string; page: number; limit?: number }
    >({
      async queryFn({ companyId, page, limit = 9 }) {
        try {
          const { services } = await import('@/modules/services/data/services')

          const filtered = services.filter((s) => s.companyId === companyId)
          const start = (page - 1) * limit
          const paginated = filtered.slice(start, start + limit)

          await new Promise((r) => setTimeout(r, 400)) // –∏–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏

          return { data: paginated }
        } catch (err) {
          return { error: { status: 500, data: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Å–ª—É–≥' } }
        }
      },
    }),
    */
  }),
})

// ===============================
// –≠–∫—Å–ø–æ—Ä—Ç —Ö—É–∫–æ–≤
// ===============================
export const {
  useLazyGetProductsQuery,
  useGetProductQuery,
  useLazyGetCompanyServicesQuery,
} = productsApi
