/* import { createApi } from '@reduxjs/toolkit/query/react'
import type { BaseQueryFn } from '@reduxjs/toolkit/query'
import type { Company } from '@/common/types/services'
import { companies as mockCompanies } from '@/modules/services/data/companies'

const localBaseQuery: BaseQueryFn<
  { url?: string; params?: Record<string, unknown> } | string,
  unknown,
  { status?: number; error?: string }
> = async (args) => {
  await new Promise((res) => setTimeout(res, 120))

  try {
    const url = typeof args === 'string' ? args : args?.url
    const params = typeof args === 'string' ? undefined : args?.params

    if (url === '/api/companies') {
      if (
        params &&
        typeof params.categoryId === 'string' &&
        params.categoryId.trim() !== ''
      ) {
        return {
          data: mockCompanies.filter(
            (c) => c.categoryId === params.categoryId
          ) as Company[],
        }
      }

      return { data: mockCompanies as Company[] }
    }

    return { error: { status: 404, error: 'Not found (local mock)' } }
  } catch (err: any) {
    return { error: { status: 500, error: err?.message ?? 'Local error' } }
  }
}

export const companiesApi = createApi({
  reducerPath: 'companiesApi',
  baseQuery: localBaseQuery,
  endpoints: (build) => ({
    getCompanies: build.query<Company[], string | undefined>({
      query: (categoryId) =>
        categoryId?.trim()
          ? { url: '/api/companies', params: { categoryId } }
          : { url: '/api/companies' }, 
    }),
  }),
})

export const { useGetCompaniesQuery } = companiesApi */

///////////////////////////////////////////////////////////////////////////////////////////////////

// src/services/companiesApi.ts
import { createApi } from '@reduxjs/toolkit/query/react'
import type { Company } from '@/common/types/services'
import { baseQuery } from '@/services/baseQuery' // ‚úÖ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π baseQuery

// üí§ –õ–æ–∫–∞–ª—å–Ω—ã–µ mock-–¥–∞–Ω–Ω—ã–µ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ—Ñ–ª–∞–π–Ω–∞ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤)
/* import { companies as mockCompanies } from '@/modules/services/data/companies' */

// ============================================================================
// üí§ 1Ô∏è‚É£ –õ–û–ö–ê–õ–¨–ù–´–ô –í–ê–†–ò–ê–ù–¢ (mock) ‚Äî –æ—Ç–∫–ª—é—á—ë–Ω, –Ω–æ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–∏ –æ—Ñ–ª–∞–π–Ω–µ
// ============================================================================
/*
import type { BaseQueryFn } from '@reduxjs/toolkit/query'

const localBaseQuery: BaseQueryFn<
  { url?: string; params?: Record<string, unknown> } | string,
  unknown,
  { status?: number; error?: string }
> = async (args) => {
  await new Promise((res) => setTimeout(res, 120))

  try {
    const url = typeof args === 'string' ? args : args?.url
    const params = typeof args === 'string' ? undefined : args?.params

    if (url === '/api/companies') {
      if (
        params &&
        typeof params.categoryId === 'string' &&
        params.categoryId.trim() !== ''
      ) {
        return {
          data: mockCompanies.filter(
            (c) => c.categoryId === params.categoryId
          ) as Company[],
        }
      }

      return { data: mockCompanies as Company[] }
    }

    return { error: { status: 404, error: 'Not found (local mock)' } }
  } catch (err: any) {
    return { error: { status: 500, error: err?.message ?? 'Local error' } }
  }
}
*/

// ============================================================================
// ‚úÖ 2Ô∏è‚É£ –†–ï–ê–õ–¨–ù–´–ô –í–ê–†–ò–ê–ù–¢ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—â–∏–π baseQuery)
// ============================================================================
export const companiesApi = createApi({
  reducerPath: 'companiesApi',
  baseQuery, // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  endpoints: (build) => ({
    /**
     * GET /api/companies
     * –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å categoryId (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
     */
    getCompanies: build.query<Company[], string | undefined>({
      query: (categoryId) => {
        if (categoryId?.trim()) {
          return {
            url: '/api/companies',
            method: 'GET',
            params: { categoryId },
          }
        }
        return { url: '/api/companies', method: 'GET' }
      },
    }),
  }),
})

export const { useGetCompaniesQuery } = companiesApi
export default companiesApi
