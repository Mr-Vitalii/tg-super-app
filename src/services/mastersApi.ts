import { createApi } from '@reduxjs/toolkit/query/react'
import type { Master } from '@/common/types/masters'
import { masters } from '@/modules/services/data/masters'
import { normalizeAndSortTimes, normalizeTime } from '@/utils/helpers'

// ============================================================================
// ‚úÖ –õ–û–ö–ê–õ–¨–ù–´–ô (mock) –í–ê–†–ò–ê–ù–¢ ‚Äî –ê–ö–¢–ò–í–ï–ù
// ============================================================================

export const mastersApi = createApi({
  reducerPath: 'mastersApi',

  // –ª–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ ‚Äî –Ω–µ —Ö–æ–¥–∏–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
  baseQuery: async () => ({ data: null }),

  endpoints: (builder) => ({
    /**
     * üîπ getAvailableMasters:
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ "–í—ã–±–æ—Ä –º–∞—Å—Ç–µ—Ä–∞ –ø–æ –¥–∞—Ç–µ".
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–ª–æ—Ç—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É (–∏ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ).
     *
     * params: { serviceId, date, time? }
     */
    getAvailableMasters: builder.query<
      Master[],
      { serviceId: string; date: string; time?: string }
    >({
      queryFn: async ({ serviceId, date, time }) => {
        try {
          const normReqTime = time ? normalizeTime(time) : undefined

          const filtered = masters
            .filter((m) => m.services.includes(serviceId))
            .map((m) => {
              const matchedDates = m.availableDates
                .filter((d) => d.date === date)
                .map((d) => ({
                  date: d.date,
                  times: normalizeAndSortTimes(d.times),
                }))

              return {
                ...m,
                availableDates: matchedDates,
              }
            })
            .filter((m) =>
              normReqTime
                ? m.availableDates.some((d) => d.times.includes(normReqTime))
                : m.availableDates.length > 0
            )

          await new Promise((r) => setTimeout(r, 120)) // –∏–º–∏—Ç–∞—Ü–∏—è latency

          return { data: filtered }
        } catch (e) {
          return {
            error: {
              status: 'CUSTOM_ERROR',
              data: e,
            } as any,
          }
        }
      },
    }),

    /**
     * üîπ getMastersByService:
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ "–í—ã–±–æ—Ä –ø–æ –º–∞—Å—Ç–µ—Ä—É".
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –º–∞—Å—Ç–µ—Ä–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –¥–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É (serviceId),
     * –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º.
     *
     * params: { serviceId }
     */
    getMastersByService: builder.query<Master[], { serviceId: string }>({
      queryFn: async ({ serviceId }) => {
        try {
          const filtered = masters
            .filter((m) => m.services.includes(serviceId))
            .map((m) => ({
              ...m,
              availableDates: m.availableDates.map((d) => ({
                date: d.date,
                times: normalizeAndSortTimes(d.times),
              })),
            }))

          await new Promise((r) => setTimeout(r, 100))

          return { data: filtered }
        } catch (e) {
          return {
            error: {
              status: 'CUSTOM_ERROR',
              data: e,
            } as any,
          }
        }
      },
    }),
  }),
})

// üîπ –≠–∫—Å–ø–æ—Ä—Ç —Ö—É–∫–æ–≤ (–æ–±—â–∏–π –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
export const {
  useGetAvailableMastersQuery,
  useLazyGetAvailableMastersQuery,
  useGetMastersByServiceQuery,
  useLazyGetMastersByServiceQuery,
} = mastersApi

export default mastersApi

// ============================================================================
// üí§ –°–ï–†–í–ï–†–ù–´–ô –í–ê–†–ò–ê–ù–¢ (–ü–†–ò–ú–ï–†) ‚Äî –û–¢–ö–õ–Æ–ß–Å–ù
// ============================================================================
//
// import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
// import type { Master } from '@/common/types/masters'
//
// export const mastersApi = createApi({
//   reducerPath: 'mastersApi',
//   baseQuery: fetchBaseQuery({ baseUrl: '/api' }),
//   endpoints: (builder) => ({
//     /**
//      * –°–µ—Ä–≤–µ—Ä–Ω—ã–π endpoint –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ø–æ –¥–∞—Ç–µ".
//      * GET /api/masters/available?serviceId=...&date=...&time=...
//      */
//     getAvailableMasters: builder.query<
//       Master[],
//       { serviceId: string; date: string; time?: string }
//     >({
//       query: ({ serviceId, date, time }) => {
//         const params = new URLSearchParams({ serviceId, date })
//         if (time) params.append('time', time)
//         return {
//           url: `/masters/available?${params.toString()}`,
//           method: 'GET',
//         }
//       },
//     }),
//
//     /**
//      * –°–µ—Ä–≤–µ—Ä–Ω—ã–π endpoint –¥–ª—è —Ä–µ–∂–∏–º–∞ "–ø–æ –º–∞—Å—Ç–µ—Ä—É".
//      * GET /api/masters/by-service?serviceId=...
//      */
//     getMastersByService: builder.query<Master[], { serviceId: string }>({
//       query: ({ serviceId }) => ({
//         url: `/masters/by-service?serviceId=${serviceId}`,
//         method: 'GET',
//       }),
//     }),
//   }),
// })
//
// export const {
//   useGetAvailableMastersQuery,
//   useLazyGetAvailableMastersQuery,
//   useGetMastersByServiceQuery,
//   useLazyGetMastersByServiceQuery,
// } = mastersApi
//
// export default mastersApi
//
// ============================================================================
// üí° –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞:
//    ‚Ä¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º: –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –±–ª–æ–∫ –≤—ã—à–µ –∏
//      —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –±–ª–æ–∫.
//    ‚Ä¢ –•—É–∫–∏ –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–º–µ—Å—Ç–∏–º—ã, –ø—Ä–∞–≤–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.
// ============================================================================
